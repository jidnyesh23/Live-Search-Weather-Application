{"version":3,"sources":["forcast.js","images/WeatherIcons.gif","currentLocation.js","App.js","serviceWorker.js","index.js","apiKeys.js"],"names":["Forcast","props","query","setQuery","useState","error","setError","weather","setWeather","search","city","axios","get","apiKeys","base","key","then","response","data","catch","console","log","message","defaults","useEffect","_jsxs","className","children","_jsx","ReactAnimatedWeather","icon","color","size","animate","type","placeholder","onChange","e","target","value","src","onClick","main","name","sys","country","Math","round","temp","humidity","visibility","wind","speed","Weather","React","Component","constructor","arguments","state","lat","undefined","lon","errorMessage","temperatureC","temperatureF","description","sunrise","sunset","errorMsg","getPosition","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getWeather","async","api_call","fetch","json","this","setState","componentDidMount","position","coords","latitude","longitude","err","alert","timerID","setInterval","componentWillUnmount","clearInterval","render","Fragment","id","Clock","format","interval","ticking","d","Date","getDay","getDate","getMonth","getFullYear","loader","style","width","WebkitUserDrag","fontSize","fontWeight","marginTop","footerStyle","textAlign","padding","backgroundColor","borderTop","fontFamily","textStyle","marginBottom","linkStyle","textDecoration","nameStyle","separatorStyle","App","CurrentLocation","href","rel","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.14a796e5.chunk.js","sourcesContent":["import React, { useState, useEffect, Component } from \"react\";\nimport axios from \"axios\";\nimport apiKeys from \"./apiKeys\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\n\nfunction Forcast(props) {\n  const [query, setQuery] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [weather, setWeather] = useState({});\n\n  const search = (city) => {\n    axios\n      .get(\n        `${apiKeys.base}weather?q=${\n          city != \"[object Object]\" ? city : query\n        }&units=metric&APPID=${apiKeys.key}`\n      )\n      .then((response) => {\n        setWeather(response.data);\n        setQuery(\"\");\n      })\n      .catch(function (error) {\n        console.log(error);\n        setWeather(\"\");\n        setQuery(\"\");\n        setError({ message: \"Not Found\", query: query });\n      });\n  };\n  function checkTime(i) {\n    if (i < 10) {\n      i = \"0\" + i;\n    } // add zero in front of numbers < 10\n    return i;\n  }\n\n  const defaults = {\n    color: \"white\",\n    size: 112,\n    animate: true,\n  };\n\n  useEffect(() => {\n    search(\"Delhi\");\n  }, []);\n\n  return (\n    <div className=\"forecast\">\n      <div className=\"forecast-icon\">\n        <ReactAnimatedWeather\n          icon={props.icon}\n          color={defaults.color}\n          size={defaults.size}\n          animate={defaults.animate}\n        />\n      </div>\n      <div className=\"today-weather\">\n        <h3>{props.weather}</h3>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search any city\"\n            onChange={(e) => setQuery(e.target.value)}\n            value={query}\n          />\n          <div className=\"img-box\">\n            {\" \"}\n            <img\n              src=\"https://images.avishkaar.cc/workflow/newhp/search-white.png\"\n              onClick={search}\n            />\n          </div>\n        </div>\n        <ul>\n          {typeof weather.main != \"undefined\" ? (\n            <div>\n              {\" \"}\n              <li className=\"cityHead\">\n                <p>\n                  {weather.name}, {weather.sys.country}\n                </p>\n                <img\n                  className=\"temp\"\n                  src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}.png`}\n                />\n              </li>\n              <li>\n                Temperature{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.main.temp)}Â°c ({weather.weather[0].main})\n                </span>\n              </li>\n              <li>\n                Humidity{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.main.humidity)}%\n                </span>\n              </li>\n              <li>\n                Visibility{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.visibility)} mi\n                </span>\n              </li>\n              <li>\n                Wind Speed{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.wind.speed)} Km/h\n                </span>\n              </li>\n            </div>\n          ) : (\n            <li>\n              {error.query} {error.message}\n            </li>\n          )}\n        </ul>\n      </div>\n    </div>\n  );\n}\nexport default Forcast;\n","export default __webpack_public_path__ + \"static/media/WeatherIcons.c90d089e.gif\";","import React from \"react\";\nimport apiKeys from \"./apiKeys\";\nimport Clock from \"react-live-clock\";\nimport Forcast from \"./forcast\";\nimport loader from \"./images/WeatherIcons.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\nconst dateBuilder = (d) => {\n  let months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  let days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n\n  return `${day}, ${date} ${month} ${year}`;\n};\nconst defaults = {\n  color: \"white\",\n  size: 112,\n  animate: true,\n};\nclass Weather extends React.Component {\n  state = {\n    lat: undefined,\n    lon: undefined,\n    errorMessage: undefined,\n    temperatureC: undefined,\n    temperatureF: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    icon: \"CLEAR_DAY\",\n    sunrise: undefined,\n    sunset: undefined,\n    errorMsg: undefined,\n  };\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPosition()\n        //If user allow location service then will fetch data & send it to get-weather function.\n        .then((position) => {\n          this.getWeather(position.coords.latitude, position.coords.longitude);\n        })\n        .catch((err) => {\n          //If user denied location service then standard location weather will le shown on basis of latitude & longitude.\n          this.getWeather(28.67, 77.22);\n          alert(\n            \"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real time weather.\"\n          );\n        });\n    } else {\n      alert(\"Geolocation not available\");\n    }\n\n    this.timerID = setInterval(\n      () => this.getWeather(this.state.lat, this.state.lon),\n      600000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  // tick = () => {\n  //   this.getPosition()\n  //   .then((position) => {\n  //     this.getWeather(position.coords.latitude, position.coords.longitude)\n  //   })\n  //   .catch((err) => {\n  //     this.setState({ errorMessage: err.message });\n  //   });\n  // }\n\n  getPosition = (options) => {\n    return new Promise(function (resolve, reject) {\n      navigator.geolocation.getCurrentPosition(resolve, reject, options);\n    });\n  };\n  getWeather = async (lat, lon) => {\n    const api_call = await fetch(\n      `${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=${apiKeys.key}`\n    );\n    const data = await api_call.json();\n    this.setState({\n      lat: lat,\n      lon: lon,\n      city: data.name,\n      temperatureC: Math.round(data.main.temp),\n      temperatureF: Math.round(data.main.temp * 1.8 + 32),\n      humidity: data.main.humidity,\n      main: data.weather[0].main,\n      country: data.sys.country,\n      // sunrise: this.getTimeFromUnixTimeStamp(data.sys.sunrise),\n\n      // sunset: this.getTimeFromUnixTimeStamp(data.sys.sunset),\n    });\n    switch (this.state.main) {\n      case \"Haze\":\n        this.setState({ icon: \"CLEAR_DAY\" });\n        break;\n      case \"Clouds\":\n        this.setState({ icon: \"CLOUDY\" });\n        break;\n      case \"Rain\":\n        this.setState({ icon: \"RAIN\" });\n        break;\n      case \"Snow\":\n        this.setState({ icon: \"SNOW\" });\n        break;\n      case \"Dust\":\n        this.setState({ icon: \"WIND\" });\n        break;\n      case \"Drizzle\":\n        this.setState({ icon: \"SLEET\" });\n        break;\n      case \"Fog\":\n        this.setState({ icon: \"FOG\" });\n        break;\n      case \"Smoke\":\n        this.setState({ icon: \"FOG\" });\n        break;\n      case \"Tornado\":\n        this.setState({ icon: \"WIND\" });\n        break;\n      default:\n        this.setState({ icon: \"CLEAR_DAY\" });\n    }\n  };\n\n  render() {\n    if (this.state.temperatureC) {\n      return (\n        <React.Fragment>\n          <div className=\"city\">\n            <div className=\"title\">\n              <h2>{this.state.city}</h2>\n              <h3>{this.state.country}</h3>\n            </div>\n            <div className=\"mb-icon\">\n              {\" \"}\n              <ReactAnimatedWeather\n                icon={this.state.icon}\n                color={defaults.color}\n                size={defaults.size}\n                animate={defaults.animate}\n              />\n              <p>{this.state.main}</p>\n            </div>\n            <div className=\"date-time\">\n              <div className=\"dmy\">\n                <div id=\"txt\"></div>\n                <div className=\"current-time\">\n                  <Clock format=\"HH:mm:ss\" interval={1000} ticking={true} />\n                </div>\n                <div className=\"current-date\">{dateBuilder(new Date())}</div>\n              </div>\n              <div className=\"temperature\">\n                <p>\n                  {this.state.temperatureC}Â°<span>C</span>\n                </p>\n                {/* <span className=\"slash\">/</span>\n                {this.state.temperatureF} &deg;F */}\n              </div>\n            </div>\n          </div>\n          <Forcast icon={this.state.icon} weather={this.state.main} />\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <img src={loader} style={{ width: \"50%\", WebkitUserDrag: \"none\" }} />\n          <h3 style={{ color: \"white\", fontSize: \"22px\", fontWeight: \"600\" }}>\n            Detecting your location\n          </h3>\n          <h3 style={{ color: \"white\", marginTop: \"10px\" }}>\n            Your current location wil be displayed on the App <br></br> & used\n            for calculating Real time weather.\n          </h3>\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default Weather;\n","import React from \"react\";\nimport CurrentLocation from \"./currentLocation\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <div className=\"container\">\n        <CurrentLocation />\n      </div>\n\n      <footer style={footerStyle}>\n        <p style={textStyle}>\n          Â© {new Date().getFullYear()}. Made by{\" \"}\n          <span style={nameStyle}>Jidnyesh Chaudhari</span>{\" \"}\n          <span style={separatorStyle}>|</span>{\" \"}\n          <a\n            href=\"https://www.linkedin.com/in/jidnyesh-chaudhari-2ba832211/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            style={linkStyle}\n          >\n            LinkedIn\n          </a>{\" \"}\n          <span style={separatorStyle}>|</span>{\" \"}\n          <a\n            href=\"https://github.com/jidnyesh23\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            style={linkStyle}\n          >\n            GitHub\n          </a>\n        </p>\n      </footer>\n    </React.Fragment>\n  );\n}\n\nconst footerStyle = {\n  textAlign: \"center\",\n  marginTop: \"3rem\",\n  padding: \"1.5rem\",\n  backgroundColor: \"#f0f4f8\",\n  color: \"#333\",\n  borderTop: \"1px solid #ccc\",\n  fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\n};\n\nconst textStyle = {\n  marginBottom: \"0.5rem\",\n  fontSize: \"1rem\",\n};\n\nconst linkStyle = {\n  textDecoration: \"none\",\n  color: \"#0077b5\",\n  fontWeight: \"bold\",\n};\n\nconst nameStyle = {\n  textDecoration: \"none\",\n  color: \"#000\",\n  fontWeight: \"bold\",\n};\n\nconst separatorStyle = {\n  color: \"#999\",\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = {\n  key: \"3bd3ee9e190f92bac2cf85a47a9a82ae\",\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\n"],"sourceRoot":""}